import tkinter as tk
from tkinter import messagebox
import random
import os

def get_flashcard_file():
    filename = "flashcard_database.txt"
    folder = os.path.join(os.path.expanduser("~"), "Documents")
    os.makedirs(folder, exist_ok=True)
    return os.path.join(folder, filename)

FLASHCARD_FILE = get_flashcard_file()

class FlashcardApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Révisez français")
        self.root.geometry("400x300")
        self.root.resizable(True, True)

        # Make sure the file exists
        if not os.path.exists(FLASHCARD_FILE):
            with open(FLASHCARD_FILE, 'w') as f:
                f.write("")

        self.main_menu()

    def clear_window(self):
        for widget in self.root.winfo_children():
            widget.destroy()

    def main_menu(self):
        self.clear_window()
        tk.Label(self.root, text="Menu Principal", font=("Helvetica", 14)).pack(pady=10)
        tk.Button(self.root, text="1. Flashcards", command=self.flashcard_menu).pack(pady=5)
        # You can add more options here later

    def flashcard_menu(self):
        self.clear_window()
        tk.Label(self.root, text="Menu Flashcards", font=("Helvetica", 14)).pack(pady=10)
        tk.Button(self.root, text="1. Créez des flashcards", command=self.faites_des_flashcards).pack(pady=5)
        tk.Button(self.root, text="2. Supprimez des flashcards", command=self.supprimez_des_flashcards).pack(pady=5)
        tk.Button(self.root, text="3. Révisez des flashcards", command=self.revisez_des_flashcards).pack(pady=5)
        tk.Button(self.root, text="Retour", command=self.main_menu).pack(pady=20)

    def faites_des_flashcards(self):
        self.clear_window()
        tk.Label(self.root, text="Écrivez le mot en français:", font=("Helvetica", 12)).pack(pady=5)
        self.question_entry = tk.Entry(self.root, width=40)
        self.question_entry.pack()

        tk.Label(self.root, text="Écrivez le mot dans ta langue maternelle:", font=("Helvetica", 12)).pack(pady=5)
        self.answer_entry = tk.Entry(self.root, width=40)
        self.answer_entry.pack()

        tk.Button(self.root, text="Ajouter", command=self.ajouter_flashcard).pack(pady=10)
        tk.Button(self.root, text="Retour", command=self.flashcard_menu).pack()

    def ajouter_flashcard(self):
        question = self.question_entry.get().strip().replace(' ', '_')
        answer = self.answer_entry.get().strip().replace(' ', '_')

        if not question or not answer:
            messagebox.showwarning("Attention", "Veuillez remplir les deux champs.")
            return

        with open(FLASHCARD_FILE, 'a') as f:
            f.write(f'{question}:{answer},')

        continuer = messagebox.askyesno("Continuer", "Voulez-vous ajouter une autre ?")
        if continuer:
            self.question_entry.delete(0, tk.END)
            self.answer_entry.delete(0, tk.END)
        else:
            self.flashcard_menu()

    def supprimez_des_flashcards(self):
        self.clear_window()

        if not os.path.exists(FLASHCARD_FILE) or os.path.getsize(FLASHCARD_FILE) == 0:
            messagebox.showinfo("Info", "Aucune flashcard à supprimer.")
            self.flashcard_menu()
            return

        with open(FLASHCARD_FILE, 'r') as f:
            data = f.read().strip()

        self.cartes = [c for c in data.split(',') if c]

        if not self.cartes:
            messagebox.showinfo("Info", "Aucune flashcard à supprimer.")
            self.flashcard_menu()
            return

        tk.Label(self.root, text="Sélectionnez les flashcards à supprimer:", font=("Helvetica", 12)).pack(pady=10)
        frame = tk.Frame(self.root)
        frame.pack()

        scrollbar = tk.Scrollbar(frame, orient=tk.VERTICAL)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        self.listbox = tk.Listbox(frame, selectmode=tk.MULTIPLE, width=50, height=10, yscrollcommand=scrollbar.set)
        for c in self.cartes:
            q, a = c.split(':')
            self.listbox.insert(tk.END, f"Q: {q.replace('_',' ')} - R: {a.replace('_',' ')}")
        self.listbox.pack(side=tk.LEFT, fill=tk.BOTH)
        scrollbar.config(command=self.listbox.yview)

        tk.Button(self.root, text="Supprimer", command=self.supprimer_selection).pack(pady=10)
        tk.Button(self.root, text="Retour", command=self.flashcard_menu).pack()


    def aide(self):

        
        
        if self.coté_choisi == 1:
            prompt = self.cote2.replace('_', ' ')
            messagebox.showinfo("Aide",f"{prompt}")
        else:
            prompt = self.cote1.replace('_', ' ')
            messagebox.showinfo("Aide",f"{prompt}")

    
    def supprimer_selection(self):
        indices = list(self.listbox.curselection())
        if not indices:
            messagebox.showwarning("Attention", "Veuillez en sélectionner au moins une.")
            return

        for index in reversed(indices):
            del self.cartes[index]

        with open(FLASHCARD_FILE, 'w') as f:
            f.write(','.join(self.cartes) + (',' if self.cartes else ''))

        messagebox.showinfo("Succès", "Flashcards supprimées.")
        self.supprimez_des_flashcards()

    def revisez_des_flashcards(self):
        self.clear_window()
        if not os.path.exists(FLASHCARD_FILE) or os.path.getsize(FLASHCARD_FILE) == 0:
            messagebox.showinfo("Info", "Aucune flashcard.")
            self.flashcard_menu()
            return

        with open(FLASHCARD_FILE, 'r') as f:
            data = f.read().strip()

        cartes = [c for c in data.split(',') if c]
        if not cartes:
            messagebox.showinfo("Info", "Aucune flashcard.")
            self.flashcard_menu()
            return

        self.carte_actuelle = random.choice(cartes)
        self.cote1, self.cote2 = self.carte_actuelle.split(':')
        self.coté_choisi = random.randint(1, 2)

        if self.coté_choisi == 1:
            prompt = self.cote1.replace('_', ' ')
        else:
            prompt = self.cote2.replace('_', ' ')

        tk.Label(self.root, text=f"{prompt} ça veut dire quoi ?", font=("Helvetica", 14)).pack(pady=20)
        self.reponse_entry = tk.Entry(self.root, width=40)
        self.reponse_entry.pack()

        tk.Button(self.root, text="Vérifier", command=self.verifier_reponse).pack(pady=10)
        tk.Button(self.root, text="Aide", command=self.aide).pack(pady=20)
        tk.Button(self.root, text="Retour", command=self.flashcard_menu).pack()
        
        
    def verifier_reponse(self):
        user_input = self.reponse_entry.get().strip().replace(' ', '_')
        correct = self.cote2 if self.coté_choisi == 1 else self.cote1

        if user_input == correct:
            self.revisez_des_flashcards()
        else:
            messagebox.showerror("Erreur", f"Mauvaise réponse. Essayez encore.")

if __name__ == '__main__':
    root = tk.Tk()
    app = FlashcardApp(root)
    root.mainloop()
